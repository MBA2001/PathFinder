{"version":3,"sources":["visualiser/Node/Node.js","algorithms/dijkstra.js","visualiser/PathFinder.js","App.js","serviceWorker.js","index.js"],"names":["Node","this","props","isStart","isFinish","isVisited","isWall","col","row","onMouseDown","onMouseEnter","onMouseUp","isInShortestPath","extractClassName","className","id","Component","dijkstra","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","nodes","node","push","getAllNodes","length","sortNodesByDistance","closestNode","shift","Infinity","updateUnvisitedNeighbors","sort","nodeA","nodeB","unvisitedNeighbors","neighbors","filter","neighbor","getUnvisitedNeighbors","previousNode","PathFinder","state","mouseIsPressed","i","j","nodesInShortestPathOrder","setState","removeVisited","setTimeout","newGrid","slice","newNode","includes","endNode","currentNode","unshift","getNodesInShortestPathOrder","animateDijkstra","getInitialGrid","getNewGridWithWallToggled","onClick","visualizeDijkstra","window","location","reload","map","rowidx","key","style","display","flexDirection","nodeidx","handleMouseDown","handleMouseUp","handleMouseEnter","currentRow","createNode","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9f7e5fde.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./node.css\";\r\n\r\nexport default class Node extends Component {\r\n  render() {\r\n    const {\r\n      isStart,\r\n      isFinish,\r\n      isVisited,\r\n      isWall,\r\n      col,\r\n      row,\r\n      onMouseDown,\r\n      onMouseEnter,\r\n      onMouseUp,\r\n      isInShortestPath,\r\n    } = this.props;\r\n    const extractClassName = isFinish\r\n      ? \"node-finish\"\r\n      : isStart\r\n      ? \"node-start\"\r\n      : isInShortestPath\r\n      ? \"node-shortest-path\"\r\n      : isWall\r\n      ? \"node-wall\"\r\n      : isVisited\r\n      ? \"node-visited\"\r\n      : \"node\";\r\n    return (\r\n      <div\r\n        className={extractClassName}\r\n        id={`node-${row}-${col}`}\r\n        onMouseDown={() => onMouseDown(row, col)}\r\n        onMouseEnter={() => onMouseEnter(row, col)}\r\n        onMouseUp={() => onMouseUp()}\r\n      ></div>\r\n    );\r\n  }\r\n}\r\n","export function dijkstra(grid, startNode, finishNode) {\r\n  const visitedNodesInOrder = [];\r\n  startNode.distance = 0;\r\n  const unvisitedNodes = getAllNodes(grid);\r\n  while (!!unvisitedNodes.length) {\r\n    sortNodesByDistance(unvisitedNodes);\r\n    const closestNode = unvisitedNodes.shift();\r\n    // If we encounter a wall, we skip it.\r\n    if (closestNode.isWall) continue;\r\n    // If the closest node is at a distance of infinity,\r\n    // we must be trapped and should therefore stop.\r\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n    closestNode.isVisited = true;\r\n    visitedNodesInOrder.push(closestNode);\r\n    if (closestNode === finishNode) return visitedNodesInOrder;\r\n    updateUnvisitedNeighbors(closestNode, grid);\r\n  }\r\n}\r\n\r\nfunction sortNodesByDistance(unvisitedNodes) {\r\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(node, grid) {\r\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n  for (const neighbor of unvisitedNeighbors) {\r\n    neighbor.distance = node.distance + 1;\r\n    neighbor.previousNode = node;\r\n  }\r\n}\r\n\r\nfunction getUnvisitedNeighbors(node, grid) {\r\n  const neighbors = [];\r\n  const { col, row } = node;\r\n  if (row > 0) neighbors.push(grid[row - 1][col]);\r\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n  if (col > 0) neighbors.push(grid[row][col - 1]);\r\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n  return neighbors.filter((neighbor) => !neighbor.isVisited);\r\n}\r\n\r\nfunction getAllNodes(grid) {\r\n  const nodes = [];\r\n  for (const row of grid) {\r\n    for (const node of row) {\r\n      nodes.push(node);\r\n    }\r\n  }\r\n  return nodes;\r\n}\r\n\r\n// Backtracks from the finishNode to find the shortest path.\r\n// Only works when called *after* the dijkstra method above.\r\nexport function getNodesInShortestPathOrder(finishNode) {\r\n  const nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Node from \"./Node/Node\";\r\nimport { dijkstra, getNodesInShortestPathOrder } from \"../algorithms/dijkstra\";\r\nimport \"./pathfinder.css\";\r\n\r\nlet START_NODE_ROW = 10;\r\nlet START_NODE_COL = 5;\r\nlet END_NODE_ROW = 10;\r\nlet END_NODE_COL = 45;\r\n\r\nexport default class PathFinder extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      nodes: [],\r\n      mouseIsPressed: false,\r\n    };\r\n  }\r\n\r\n  removeVisited() {\r\n    const { nodes } = this.state;\r\n\r\n    for (let i = 0; i < 20; i++) {\r\n      for (let j = 0; j < 50; j++) {\r\n        nodes[i][j].isVisited = false;\r\n      }\r\n    }\r\n\r\n    return nodes;\r\n  }\r\n\r\n  animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\r\n    let flag = false;\r\n    for (let i = 0; i < visitedNodesInOrder.length; i++) {\r\n      if (i === 1) {\r\n        this.setState({ nodes: this.removeVisited() });\r\n      }\r\n      setTimeout(() => {\r\n        const newGrid = this.state.nodes.slice();\r\n        const node = visitedNodesInOrder[i];\r\n        let newNode = { ...node };\r\n        if (nodesInShortestPathOrder.includes(node)) {\r\n          newNode = {\r\n            ...node,\r\n            isInShortestPath: true,\r\n          };\r\n        } else {\r\n          newNode = {\r\n            ...node,\r\n            isVisited: true,\r\n          };\r\n        }\r\n        newGrid[node.row][node.col] = newNode;\r\n\r\n        this.setState({ nodes: newGrid });\r\n      }, 5 * i);\r\n    }\r\n  }\r\n\r\n  visualizeDijkstra() {\r\n    const { nodes } = this.state;\r\n    const startNode = nodes[START_NODE_ROW][START_NODE_COL];\r\n    const endNode = nodes[END_NODE_ROW][END_NODE_COL];\r\n    const visitedNodesInOrder = dijkstra(nodes, startNode, endNode);\r\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(endNode);\r\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\r\n  }\r\n  componentDidMount() {\r\n    const grid = getInitialGrid();\r\n    this.setState({ nodes: grid });\r\n  }\r\n\r\n  handleMouseDown(row, col) {\r\n    const newGrid = getNewGridWithWallToggled(this.state.nodes, col, row);\r\n    this.setState({ nodes: newGrid, mouseIsPressed: true });\r\n  }\r\n\r\n  handleMouseEnter(row, col) {\r\n    if (!this.state.mouseIsPressed) return;\r\n    const newGrid = getNewGridWithWallToggled(this.state.nodes, col, row);\r\n    this.setState({ nodes: newGrid });\r\n  }\r\n\r\n  handleMouseUp() {\r\n    this.setState({ mouseIsPressed: false });\r\n  }\r\n\r\n  render() {\r\n    const { nodes, mouseIsPressed } = this.state;\r\n    return (\r\n      <>\r\n        <button onClick={() => this.visualizeDijkstra()}>\r\n          Visualize Dijkstra's algorithm\r\n        </button>\r\n        <button\r\n          onClick={() => {\r\n            window.location.reload();\r\n          }}\r\n        >\r\n          Reset\r\n        </button>\r\n        <div className=\"grid\">\r\n          {nodes.map((row, rowidx) => {\r\n            return (\r\n              <div\r\n                key={rowidx}\r\n                style={{ display: \"flex\", flexDirection: \"row\" }}\r\n              >\r\n                {row.map((node, nodeidx) => {\r\n                  const {\r\n                    isStart,\r\n                    isFinish,\r\n                    isVisited,\r\n                    isWall,\r\n                    row,\r\n                    col,\r\n                    isInShortestPath,\r\n                  } = node;\r\n                  return (\r\n                    <Node\r\n                      key={nodeidx}\r\n                      row={row}\r\n                      col={col}\r\n                      isStart={isStart}\r\n                      isFinish={isFinish}\r\n                      isVisited={isVisited}\r\n                      isWall={isWall}\r\n                      isInShortestPath={isInShortestPath}\r\n                      mouseIsPressed={mouseIsPressed}\r\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n                      onMouseUp={() => this.handleMouseUp()}\r\n                      onMouseEnter={(row, col) =>\r\n                        this.handleMouseEnter(row, col)\r\n                      }\r\n                    ></Node>\r\n                  );\r\n                })}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst getInitialGrid = () => {\r\n  const grid = [];\r\n  for (let i = 0; i < 20; i++) {\r\n    let currentRow = [];\r\n    for (let j = 0; j < 50; j++) {\r\n      currentRow.push(createNode(j, i));\r\n    }\r\n    grid.push(currentRow);\r\n  }\r\n  return grid;\r\n};\r\n\r\nconst createNode = (col, row) => {\r\n  return {\r\n    col,\r\n    row,\r\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\r\n    isFinish: row === END_NODE_ROW && col === END_NODE_COL,\r\n    distance: Infinity,\r\n    isVisited: false,\r\n    isWall: false,\r\n    previousNode: null,\r\n    isInShortestPath: false,\r\n  };\r\n};\r\n\r\nconst getNewGridWithWallToggled = (grid, col, row) => {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  const newNode = {\r\n    ...node,\r\n    isWall: !node.isWall,\r\n  };\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n};\r\n","import React from 'react';\nimport './App.css';\nimport PathFinder from './visualiser/PathFinder';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PathFinder></PathFinder>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}